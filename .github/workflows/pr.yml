name: Continuous Integration

on:
  pull_request:
  workflow_dispatch:

permissions:
  security-events: write
  packages: read
  pull-requests: write
  contents: write

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  handle-dependabot-failures:
    runs-on: ubuntu-latest
    needs: ci
    if: always() && needs.ci.result == 'failure' && github.event.pull_request.user.login == 'dependabot[bot]'
    concurrency:
      group: handle-dependabot-failures-${{ github.event.pull_request.number }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          persist-credentials: true
          fetch-depth: 0
          token: ${{ secrets.DEPENDABOT_PAT }}

      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download failed test artifacts
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: "Failed tests on amd64"
          path: testdata/failed/

      - name: Handle Dependabot Playwright Go test failures
        id: handle-dependabot-failures
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Detected Playwright Go dependency update in Dependabot PR with test failures"
          
          # Check if there are failed test files
          if [ -d "testdata/failed" ] && [ "$(ls -A testdata/failed 2>/dev/null)" ]; then
            echo "Found failed test files, processing them..."
            
            # Process failed test files for each browser
            for browser in chromium firefox webkit; do
              # Check if there are any failed test files for this browser
              failed_files=$(ls testdata/failed/screenshot-*-${browser}.png 2>/dev/null || true)
              
              if [ -n "$failed_files" ]; then
                # Count the number of files
                file_count=$(echo "$failed_files" | wc -l)
                
                echo "Found $file_count failed test file(s) for $browser"
                
                if [ "$file_count" -eq 2 ]; then
                  # Exactly two files - this is the expected case
                  first_file=$(echo "$failed_files" | head -n1)
                  second_file=$(echo "$failed_files" | tail -n1)
                  
                  if cmp -s "$first_file" "$second_file"; then
                    echo "Both files have the same content, proceeding with update"
                    mv "$first_file" "testdata/screenshot-${browser}.png"
                    rm "$second_file"
                    echo "Updated testdata/screenshot-${browser}.png from failed tests"
                  else
                    echo "Error: Files have different content"
                    echo "This requires manual intervention. Files found:"
                    echo "$failed_files"
                    exit 1
                  fi
                else
                  echo "Error: Expected exactly 2 files for $browser, found $file_count"
                  echo "This requires manual intervention. Files found:"
                  echo "$failed_files"
                  exit 1
                fi
              fi
            done
            
            git status

            # Capture the list of changed files using git diff
            echo "Checking for changed files..."
            CHANGED_FILES=$(git status --porcelain | grep " M" | grep ".png" | sort || true)
            
            echo "Git diff output:"
            echo "$CHANGED_FILES"
            
            if [ -n "$CHANGED_FILES" ]; then
              echo "Changed screenshot files:"
              echo "$CHANGED_FILES"
              
              # Save the list of changed files to a temporary file for the comment step
              echo "$CHANGED_FILES" > changed_files.txt
              
              # Set output to indicate screenshots were updated
              echo "screenshots_updated=true" >> "$GITHUB_OUTPUT"
              
              echo "Successfully prepared test screenshots for commit"
            else
              echo "No screenshot files were actually changed"
              echo "screenshots_updated=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No failed test files found in testdata/failed/"
            echo "screenshots_updated=false" >> "$GITHUB_OUTPUT"
          fi

      # Thanks https://github.com/stefanzweifel/git-auto-commit-action/discussions/334
      - name: "Import GPG key"
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        with:
          gpg_private_key: ${{ secrets.GPG_KEY_PRIVATE }}
          passphrase: ${{ secrets.GPG_KEY_PASSWORD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: "Commit and push changes"
        uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0
        id: commit-screenshots
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        with:
           commit_author: "${{ steps.import-gpg.outputs.name }} <${{ steps.import-gpg.outputs.email }}>"
           commit_user_name: ${{ steps.import-gpg.outputs.name }}
           commit_user_email: ${{ steps.import-gpg.outputs.email }}
           commit_message: 'BREAKING CHANGE: update test screenshots for Playwright Go dependency update'
           commit_options: '-S'
           push_options: ''
           file_pattern: '*.png'
           skip_fetch: true

      - name: Find existing screenshot comment
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        id: find-comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Updated Test Screenshots
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment body
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        env:
          COMMIT_SHA: ${{ steps.commit-screenshots.outputs.commit_hash }}
        run: |
          echo "# Updated Test Screenshots" > comment.md
          echo "" >> comment.md
          echo "The following test screenshots have been updated due to the Playwright Go dependency update:" >> comment.md
          echo "" >> comment.md
          
          # List only the changed screenshot files using the saved list
          if [ -f "changed_files.txt" ]; then
            while IFS= read -r line; do
              # Extract file path from git status output (format: " M filename")
              filepath=$(echo "$line" | sed 's/^ M //')
              if [ -f "$filepath" ]; then
                filename=$(basename "$filepath")
                echo "![$filename](https://raw.githubusercontent.com/mountain-reverie/playwright-ci-go/$COMMIT_SHA/$filepath)" >> comment.md
              fi
            done < changed_files.txt
          else
            echo "- No specific files found (this should not happen)" >> comment.md
          fi
          
          echo "" >> comment.md
          echo "These changes have been automatically committed and pushed to this PR." >> comment.md
          echo "Commit: https://github.com/mountain-reverie/playwright-ci-go/commit/$COMMIT_SHA" >> comment.md

      - name: Create or update comment on PR with updated screenshots
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: comment.md
          edit-mode: replace
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add breaking label to PR
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add the "breaking" label to the PR
          gh pr edit ${{ github.event.number }} --add-label "breaking"
          echo "Successfully added 'breaking' label to PR"

  dependabot:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.repository == 'mountain-reverie/playwright-ci-go'
    steps:
      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b

      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.dependabot-metadata.outputs.maintainer-changes && (steps.dependabot-metadata.outputs.package-ecosystem == 'go_modules' || steps.dependabot-metadata.outputs.package-ecosystem == 'github_actions') }}
        run: gh pr merge --auto --merge "${{github.event.pull_request.html_url}}"
        env:
          GH_TOKEN: ${{secrets.DEPENDABOT_PAT }}