name: Continuous Integration

on:
  pull_request:
  workflow_dispatch:

permissions:
  security-events: write
  packages: read
  actions: read
  pull-requests: write
  contents: write
  id-token: write

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  handle-dependabot-failures:
    runs-on: ubuntu-latest
    needs: ci
    if: always() && needs.ci.result == 'failure' && github.event.pull_request.user.login == 'dependabot[bot]'
    concurrency:
      group: handle-dependabot-failures-${{ github.event.pull_request.number }}
      cancel-in-progress: false
    outputs:
      screenshots_updated: ${{ steps.handle-dependabot-failures.outputs.screenshots_updated }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: true
          fetch-depth: 0
          token: ${{ secrets.DEPENDABOT_PAT }}

      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download failed test artifacts
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: "Failed tests on amd64"
          path: testdata/failed/

      - name: Handle Dependabot Playwright Go test failures
        id: handle-dependabot-failures
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Detected Playwright Go dependency update in Dependabot PR with test failures"
          
          # Check if there are failed test files
          if [ -d "testdata/failed" ] && [ "$(ls -A testdata/failed 2>/dev/null)" ]; then
            echo "Found failed test files, processing them..."
            
            # Process failed test files for each browser
            for browser in chromium firefox webkit; do
              # Check if there are any failed test files for this browser
              failed_files=$(ls testdata/failed/screenshot-*-${browser}.png 2>/dev/null || true)
              
              if [ -n "$failed_files" ]; then
                # Count the number of files
                file_count=$(echo "$failed_files" | wc -l)
                
                echo "Found $file_count failed test file(s) for $browser"
                
                if [ "$file_count" -eq 2 ]; then
                  # Exactly two files - this is the expected case
                  first_file=$(echo "$failed_files" | head -n1)
                  second_file=$(echo "$failed_files" | tail -n1)
                  
                  if cmp -s "$first_file" "$second_file"; then
                    echo "Both files have the same content, proceeding with update"
                    mv "$first_file" "testdata/screenshot-${browser}.png"
                    rm "$second_file"
                    echo "Updated testdata/screenshot-${browser}.png from failed tests"
                  else
                    echo "Error: Files have different content"
                    echo "This requires manual intervention. Files found:"
                    echo "$failed_files"
                    exit 1
                  fi
                else
                  echo "Error: Expected exactly 2 files for $browser, found $file_count"
                  echo "This requires manual intervention. Files found:"
                  echo "$failed_files"
                  exit 1
                fi
              fi
            done
            
            git status

            # Capture the list of changed files using git diff
            echo "Checking for changed files..."
            CHANGED_FILES=$(git status --porcelain | grep " M" | grep ".png" | sort || true)
            
            echo "Git diff output:"
            echo "$CHANGED_FILES"
            
            if [ -n "$CHANGED_FILES" ]; then
              echo "Changed screenshot files:"
              echo "$CHANGED_FILES"
              
              # Save the list of changed files to a temporary file for the comment step
              echo "$CHANGED_FILES" > changed_files.txt
              
              # Set output to indicate screenshots were updated
              echo "screenshots_updated=true" >> "$GITHUB_OUTPUT"
              
              echo "Successfully prepared test screenshots for commit"
            else
              echo "No screenshot files were actually changed"
              echo "screenshots_updated=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No failed test files found in testdata/failed/"
            echo "screenshots_updated=false" >> "$GITHUB_OUTPUT"
          fi

      # Thanks https://github.com/stefanzweifel/git-auto-commit-action/discussions/334
      - name: "Import GPG key"
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        with:
          gpg_private_key: ${{ secrets.GPG_KEY_PRIVATE }}
          passphrase: ${{ secrets.GPG_KEY_PASSWORD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: "Commit and push changes"
        uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0
        id: commit-screenshots
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go')
        with:
           token: ${{ secrets.DEPENDABOT_PAT }}
           commit_author: "${{ steps.import-gpg.outputs.name }} <${{ steps.import-gpg.outputs.email }}>"
           commit_user_name: ${{ steps.import-gpg.outputs.name }}
           commit_user_email: ${{ steps.import-gpg.outputs.email }}
           commit_message: 'BREAKING CHANGE: update test screenshots for Playwright Go dependency update'
           commit_options: '-S'
           push_options: ''
           file_pattern: '*.png'

      - name: Find existing screenshot comment
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        id: find-comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Updated Test Screenshots
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment body
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        env:
          COMMIT_SHA: ${{ steps.commit-screenshots.outputs.commit_hash }}
        run: |
          echo "# Updated Test Screenshots" > comment.md
          echo "" >> comment.md
          echo "The following test screenshots have been updated due to the Playwright Go dependency update:" >> comment.md
          echo "" >> comment.md
          
          # List only the changed screenshot files using the saved list
          if [ -f "changed_files.txt" ]; then
            while IFS= read -r line; do
              # Extract file path from git status output (format: " M filename")
              filepath=$(echo "$line" | sed 's/^ M //')
              if [ -f "$filepath" ]; then
                filename=$(basename "$filepath")
                echo "![$filename](https://raw.githubusercontent.com/mountain-reverie/playwright-ci-go/$COMMIT_SHA/$filepath)" >> comment.md
              fi
            done < changed_files.txt
          else
            echo "- No specific files found (this should not happen)" >> comment.md
          fi
          
          echo "" >> comment.md
          echo "These changes have been automatically committed and pushed to this PR." >> comment.md
          echo "Commit: https://github.com/mountain-reverie/playwright-ci-go/commit/$COMMIT_SHA" >> comment.md

      - name: Create or update comment on PR with updated screenshots
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: comment.md
          edit-mode: replace
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add breaking label to PR
        if: contains(steps.dependabot-metadata.outputs.dependency-names, 'github.com/playwright-community/playwright-go') && steps.commit-screenshots.outputs.changes_detected == 'true' && steps.commit-screenshots.outputs.commit_hash != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add the "breaking" label to the PR
          gh pr edit ${{ github.event.number }} --add-label "breaking"
          echo "Successfully added 'breaking' label to PR"

  claude-fix-dependabot-failures:
    runs-on: ubuntu-latest
    needs: [ci, handle-dependabot-failures]
    if: always() && needs.ci.result == 'failure' && github.event.pull_request.user.login == 'dependabot[bot]' && (needs.handle-dependabot-failures.result == 'skipped' || (needs.handle-dependabot-failures.result == 'success' && needs.handle-dependabot-failures.outputs.screenshots_updated != 'true'))
    concurrency:
      group: claude-fix-dependabot-failures-${{ github.event.pull_request.number }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: true
          fetch-depth: 0
          token: ${{ secrets.DEPENDABOT_PAT }}

      - name: Check for previous Claude attempts
        id: check-previous-attempts
        run: |
          # Check if the last commit is from Claude Code Action
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%ae')
          
          echo "Last commit message: $LAST_COMMIT_MSG"
          echo "Last commit author: $LAST_COMMIT_AUTHOR"
          
          # Check if last commit contains Claude signature or is from noreply@anthropic.com
          if [[ "$LAST_COMMIT_MSG" == *"Generated with [Claude Code]"* ]] || [[ "$LAST_COMMIT_AUTHOR" == "noreply@anthropic.com" ]]; then
            echo "Previous Claude attempt detected. Skipping to avoid infinite loop."
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          else
            echo "No previous Claude attempt found. Proceeding with fix."
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Dependabot metadata
        if: steps.check-previous-attempts.outputs.should_run == 'true'
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check if Go ecosystem
        if: steps.check-previous-attempts.outputs.should_run == 'true'
        id: check-go-ecosystem
        run: |
          if [[ "${{ steps.dependabot-metadata.outputs.package-ecosystem }}" == "go_modules" ]]; then
            echo "This is a Go module update. Proceeding with Claude fix."
            echo "is_go_ecosystem=true" >> "$GITHUB_OUTPUT"
          else
            echo "This is not a Go module update (ecosystem: ${{ steps.dependabot-metadata.outputs.package-ecosystem }}). Skipping Claude fix."
            echo "is_go_ecosystem=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Go
        if: steps.check-previous-attempts.outputs.should_run == 'true' && steps.check-go-ecosystem.outputs.is_go_ecosystem == 'true'
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version: stable

      - name: Install golangci-lint && gopls
        if: steps.check-previous-attempts.outputs.should_run == 'true' && steps.check-go-ecosystem.outputs.is_go_ecosystem == 'true'
        run: |
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
          go install golang.org/x/tools/gopls@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          golangci-lint --version

      - name: Run Claude Code Action to fix build/test failures
        if: steps.check-previous-attempts.outputs.should_run == 'true' && steps.check-go-ecosystem.outputs.is_go_ecosystem == 'true'
        id: claude-fix
        uses: anthropics/claude-code-action@777ffcbfc9d2e2b07f3cfec41b7c7eadedd1f0dc
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --allowedTools 'Edit,MultiEdit,Write,Read,Glob,Grep,LS,Bash(git:*),Bash(go:*),Bash(golangci-lint:*),Bash(gh:*)'
            --mcp-config '{"mcpServers": {"gopls": {"command": "gopls", "args": ["mcp"] }}}'
          prompt: |
            /fix-ci

            This is a dependabot PR that has failed CI. Please analyze and fix the build or test failures systematically.
            
            **Context:**
            - Dependabot PR updating: ${{ steps.dependabot-metadata.outputs.dependency-names }}
            - Update type: ${{ steps.dependabot-metadata.outputs.update-type }}
            - Package ecosystem: ${{ steps.dependabot-metadata.outputs.package-ecosystem }}
            - Previous version: ${{ steps.dependabot-metadata.outputs.previous-version }}
            - New version: ${{ steps.dependabot-metadata.outputs.new-version }}
            - Screenshot auto-fix: Attempted but did not resolve the CI failures
            
            **Required Analysis Steps:**
            1. **Initial Assessment**: Run `go build .`, `golangci-lint run` and `go test -v .` to identify specific failures
            2. **Root Cause Analysis**: Determine what API changes or breaking changes caused the failures
            3. **Dependency Check**: Run `go mod tidy` and check if additional dependencies are needed
            4. **Fix Implementation**: Make targeted fixes for compilation/test failures
            5. **Validation**: Re-run `go build .` and `go test -v .` to confirm fixes work
            6. **Final Status**: Provide clear summary of what was fixed
            
            **Critical Requirements:**
            - **Document your progress**: After each major step, clearly state what you found and what you're doing
            - **Be specific**: When fixing issues, explain what changed in the dependency and how you're adapting to it
            - **Minimal changes only**: Only modify code that's broken by the dependency update
            - **Preserve behavior**: Ensure existing functionality remains unchanged
            - **Test thoroughly**: All tests must pass before completing
            - **Do not commit anything**: Next steps will handle committing if successful
            
            **Output Format for Final Status:**
            When you complete your work, please provide a clear summary in this format:
            
            ## Fix Summary
            - **Build Status**: [PASSED/FAILED]
            - **Test Status**: [PASSED/FAILED] 
            - **Files Modified**: [List of files you changed]
            - **Key Changes**: [Brief description of main fixes applied]
            - **Dependency Impact**: [What changed in the updated dependencies]
            
            **Important**: If you cannot fix the issues after thorough analysis, clearly explain what's blocking the fix so maintainers understand what manual intervention is needed.

      - name: "Import GPG key for Claude fixes"
        if: steps.check-previous-attempts.outputs.should_run == 'true' && steps.check-go-ecosystem.outputs.is_go_ecosystem == 'true' && steps.claude-fix.outcome == 'success'
        id: import-gpg-claude
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        with:
          gpg_private_key: ${{ secrets.GPG_KEY_PRIVATE }}
          passphrase: ${{ secrets.GPG_KEY_PASSWORD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: "Commit and push Claude fixes"
        uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0
        id: commit-claude-fixes
        if: steps.check-previous-attempts.outputs.should_run == 'true' && steps.check-go-ecosystem.outputs.is_go_ecosystem == 'true' && steps.claude-fix.outcome == 'success'
        with:
           token: ${{ secrets.DEPENDABOT_PAT }}
           commit_author: "${{ steps.import-gpg-claude.outputs.name }} <${{ steps.import-gpg-claude.outputs.email }}>"
           commit_user_name: ${{ steps.import-gpg-claude.outputs.name }}
           commit_user_email: ${{ steps.import-gpg-claude.outputs.email }}
           commit_message: |
             fix: automated dependabot fixes by Claude Code Action
             
             - Fixed build and test failures caused by dependency updates
             - Updated packages: ${{ steps.dependabot-metadata.outputs.dependency-names }}
             - Update type: ${{ steps.dependabot-metadata.outputs.update-type }}
             
             🤖 Generated with [Claude Code](https://claude.ai/code)
             
             Co-Authored-By: Claude <noreply@anthropic.com>
           commit_options: '-S'
           push_options: ''

      - name: Create summary comment on PR
        if: steps.check-previous-attempts.outputs.should_run == 'true' && steps.check-go-ecosystem.outputs.is_go_ecosystem == 'true' && always()
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🤖 Claude Code Automated Fix Attempt

            Claude Code Action has attempted to automatically fix the CI failures in this dependabot PR.

            **Dependabot Update Details:**
            - **Updated packages:** ${{ steps.dependabot-metadata.outputs.dependency-names }}
            - **Update type:** ${{ steps.dependabot-metadata.outputs.update-type }}
            - **Package ecosystem:** ${{ steps.dependabot-metadata.outputs.package-ecosystem }}

            **Claude Action Status:** ${{ steps.claude-fix.outcome }}

            ${{ steps.claude-fix.outcome == 'success' && steps.commit-claude-fixes.outputs.changes_detected == 'true' && '✅ Claude has successfully fixed the build/test failures and committed the changes. The fixes have been pushed to this PR.' || steps.claude-fix.outcome == 'success' && steps.commit-claude-fixes.outputs.changes_detected != 'true' && '✅ Claude analyzed the issues but no changes were needed to be committed.' || '❌ Claude encountered issues while attempting to fix the failures. Manual intervention may be required.' }}

            ${{ steps.commit-claude-fixes.outputs.changes_detected == 'true' && steps.commit-claude-fixes.outputs.commit_hash != '' && format('**Commit:** https://github.com/mountain-reverie/playwright-ci-go/commit/{0}', steps.commit-claude-fixes.outputs.commit_hash) || '' }}

            ---
            *This comment was automatically generated by the Claude Code Action workflow.*
          token: ${{ secrets.GITHUB_TOKEN }}

  dependabot:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]' && github.repository == 'mountain-reverie/playwright-ci-go'
    steps:
      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b

      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.dependabot-metadata.outputs.maintainer-changes && (steps.dependabot-metadata.outputs.package-ecosystem == 'go_modules' || steps.dependabot-metadata.outputs.package-ecosystem == 'github_actions') }}
        run: gh pr merge --auto --merge "${{github.event.pull_request.html_url}}"
        env:
          GH_TOKEN: ${{secrets.DEPENDABOT_PAT }}
