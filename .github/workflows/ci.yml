name: Continuous Integration

on: workflow_call

jobs:
    lint:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
          with:
            persist-credentials: false

        - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b
          with:
            go-version: stable

        - name: Run golangci-lint
          uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9

    tests:
      defaults:
        run:
          shell: bash
      runs-on:  ${{ matrix.runner }}
      strategy:
        fail-fast: false
        matrix:
          include:
          - runner: ubuntu-latest
            platform: amd64
# This platform currently do not support docker/podman on GitHub Runners
#          - runner: macos-latest
#            platform: arm64
#          - runner: windows-latest
#            platform: amd64
          - runner: ubuntu-24.04-arm
            platform: arm64
# Disable for now due to https://github.com/testcontainers/testcontainers-go/issues/2952
#          - runner: macos-13
#            platform: amd64

      steps:
        - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
          with:
            persist-credentials: false

        - name: Get go version
          id: go
          run: echo "version=$(grep '^go ' go.mod | cut -d ' ' -f 2)" >> "$GITHUB_OUTPUT"

        - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b
          with:
            go-version: ${{ steps.go.outputs.version }}

        - name: Playwright version
          id: playwright
          run: |
            export PLAYWRIGHT_GO_VERSION=$(go list -m all | grep github.com/playwright-community/playwright-go | awk '{print $2}')
            echo "playwright_go_version=$PLAYWRIGHT_GO_VERSION" >> "$GITHUB_OUTPUT"
            echo "version="$(go run github.com/playwright-community/playwright-go/cmd/playwright@$PLAYWRIGHT_GO_VERSION --version |cut -d " " -f 2) >> "$GITHUB_OUTPUT"

        - name: Install Docker
          if: ${{ matrix.runner == 'macos-13' }}
          uses: douglascamata/setup-docker-macos-action@a9ac5585664f0f68b067ff33c4e993ebd5279425

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2

        - name: Figure out cache destination depending on runner
          id: cache
          run: |
            if [[ "${{ matrix.runner }}" == "macos-13" ]]; then
              echo "cache=" >> "$GITHUB_OUTPUT"
            else
              echo "cache=type=gha,mode=max,scope=${{ matrix.platform }}" >> "$GITHUB_OUTPUT"
            fi
          
        - name: Build image locally, but use cache from GHA
          uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1
          with:
            context: "{{defaultContext}}:docker"
            build-args: PLAYWRIGHT_VERSION=${{ steps.playwright.outputs.version }}
            push: false
            file: "Dockerfile"
            cache-from: type=gha,scope=${{ matrix.platform }}
            cache-to: ${{ steps.cache.outputs.cache }}
            platforms: linux/${{ matrix.platform }}
            tags: ghcr.io/${{ github.repository }}:${{ github.sha }}
            load: true

        - name: Scan Image
          uses: anchore/scan-action@2c901ab7378897c01b8efaa2d0c9bf519cc64b9e
          id: scan
          with:
            image: ghcr.io/${{ github.repository }}:${{ github.sha }}
            fail-build: false
            output-format: sarif
    
        - name: Upload Anchore Scan SARIF Report
          uses: github/codeql-action/upload-sarif@018ac1a585e52f775ee7460e25bd00c4d516240e
          with:
            sarif_file: ${{ steps.scan.outputs.sarif }}

        - name: Install go-task
          uses: jaxxstorm/action-install-gh-release@6096f2a2bbfee498ced520b6922ac2c06e990ed2
          with: # Grab the latest version
            repo: gotestyourself/gotestsum
  
        - name: Initialize CodeQL
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          uses: github/codeql-action/init@018ac1a585e52f775ee7460e25bd00c4d516240e
          with:
            languages: go
            build-mode: manual
  
        - name: Add colima testcontainer environment
          if: ${{ matrix.runner == 'macos-13' }}
          run: |
            echo "TESTCONTAINERS_HOST_OVERRIDE=$(colima ls -j | jq -r '.address')" >> "$GITHUB_ENV"
            echo "TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock" >> "$GITHUB_ENV"
            echo "TESTCONTAINERS_RYUK_DISABLED=true" >> "$GITHUB_ENV"
            echo "DOCKER_HOST=unix://${HOME}/.colima/docker.sock" >> "$GITHUB_ENV"

        - name: Build package for CodeQL
          run: |
            go build .

        - name: Tag the image to match the example test
          run: |
            docker tag ghcr.io/${{ github.repository }}:${{ github.sha }} ghcr.io/${{ github.repository }}:${{ steps.playwright.outputs.playwright_go_version }}

        - name: Run tests
          run: |
            mkdir -p html
            mkdir -p coverage
            mkdir -p examples/coverage
            export PLAYWRIGHTCI_REPOSITORY=ghcr.io/${{ github.repository }}
            export PLAYWRIGHTCI_TAG=${{ github.sha }}
            gotestsum --jsonfile tests.json --format standard-verbose -- -covermode=atomic -test.gocoverdir="coverage/" -cpuprofile="cpu.profile" .
            gotestsum --jsonfile tests.json --format standard-verbose -- -covermode=atomic -test.gocoverdir="examples/coverage/" ./examples
            go tool covdata textfmt -i=./coverage,./examples/coverage -o html/coverage.out

        - name: Perform CodeQL Analysis
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          uses: github/codeql-action/analyze@v3
          with:
            category: "/language:go"
          
        - name: Fetch goteststats @main SHA-1
          id: goteststats-main
          run: |
            sha1=$(curl \
              --header "Accept: application/vnd.github+json" \
              --silent \
                https://api.github.com/repos/getvictor/goteststats/branches/main | \
                  jq --raw-output ".commit.sha")
            echo "sha1=$sha1" >>"$GITHUB_OUTPUT"
        - name: Cache goteststats
          id: cache-goteststats
          uses: actions/cache@v4
          with:
            key: goteststats-${{ matrix.platform }}-sha1-${{ steps.goteststats-main.outputs.sha1 }}
            path: ~/go/bin/goteststats

        - name: Install goteststats
          if: ${{ steps.cache-goteststats.outputs.cache-hit != 'true' }}
          run: |
            go install github.com/getvictor/goteststats@latest

        - name: Fetch golang-cover-diff @main SHA-1
          id: golang-cover-diff-main
          run: |
            sha1=$(curl \
              --header "Accept: application/vnd.github+json" \
              --silent \
                https://api.github.com/repos/flipgroup/golang-cover-diff/branches/main | \
                  jq --raw-output ".commit.sha")
            echo "sha1=$sha1" >>"$GITHUB_OUTPUT"

        - name: Cache golang-cover-diff
          id: cache-golang-cover-diff
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          uses: actions/cache@v4
          with:
            key: golang-cover-diff-${{ matrix.platform }}-sha1-${{ steps.golang-cover-diff-main.outputs.sha1 }}
            path: ~/go/bin/golang-cover-diff
        - name: Install golang-cover-diff
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' && steps.cache-golang-cover-diff.outputs.cache-hit != 'true' }}
          run: go install github.com/flipgroup/golang-cover-diff@main

        - name: Generate golang-cover-diff report
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' && github.event_name == 'pull_request' }}
          env:
            GITHUB_PULL_REQUEST_ID: ${{ github.event.number }}
            GITHUB_TOKEN: ${{ github.token }}
          run: |
            curl https://mountain-reverie.github.io/playwright-ci-go/coverage.out -o coverage-main.out
            golang-cover-diff coverage-main.out html/coverage.out

        - name: Generate goteststats report
          run: |
            cat tests.json | goteststats

        - name: Fetch benchstat @master SHA-1
          id: benchstat-master
          run: |
            sha1=$(curl \
              --header "Accept: application/vnd.github+json" \
              --silent \
                https://api.github.com/repos/golang/perf/branches/master | \
                  jq --raw-output ".commit.sha")
            echo "sha1=$sha1" >>"$GITHUB_OUTPUT"
        - name: Cache benchstat
          id: cache-benchstat
          uses: actions/cache@v4
          with:
            key: benchstat-${{ matrix.platform }}-sha1-${{ steps.benchstat-master.outputs.sha1 }}
            path: ~/go/bin/benchstat

        - name: Install benchstat
          if: ${{ steps.cache-benchstat.outputs.cache-hit != 'true' }}
          run: |
            go install golang.org/x/perf/cmd/benchstat@latest

        - name: Run benchmark
          run: |
            export PLAYWRIGHTCI_REPOSITORY=ghcr.io/${{ github.repository }}
            export PLAYWRIGHTCI_TAG=${{ github.sha }}
            go test -run='^$' -bench=. -count=7 -benchmem -memprofile=html/mem.profile -cpuprofile=html/cpu.profile | tee html/benchmark.txt
            benchstat html/benchmark.txt

        - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
          with:
            name: "Tests analytics on ${{ matrix.platform}}"
            path: |
              tests.json
              html/coverage.out
              cpu.profile
              html/benchmark.txt
        
        - name: Generate HTML report
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          run: |
            go tool cover -html=html/coverage.out -o html/coverage.html

        - name: Get coverage percentage
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          id: coverage
          run: |
            PERCENTAGE=$(go tool cover -func=html/coverage.out | grep total: | awk '{print $3}' | tr -d '%\n')
            echo "$PERCENTAGE% code coverage"
            echo "PERCENTAGE=$PERCENTAGE" >> $GITHUB_OUTPUT

        - name: Generate badge
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          env:
            PERCENTAGE: ${{ steps.coverage.outputs.PERCENTAGE }}
            YELLOW: ${{ steps.coverage.outputs.PERCENTAGE >= 60 }}
            GREEN: ${{ steps.coverage.outputs.PERCENTAGE >= 80 }}
          run: |
            COLOR="red"
            if [[ ${YELLOW} -eq true ]]; then
              COLOR="yellow"
            fi
            if [[ ${GREEN} -eq true ]]; then
              COLOR="green"
            fi
            curl "https://img.shields.io/badge/coverage-${PERCENTAGE}%25-${COLOR}" > html/coverage-badge.svg

        - name: Generate GitHub Pages report
          if: ${{ matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
          uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # or specific "vX.X.X" version tag for this action
          with:
            path: html
        
        - name: Upload failed tests result
          if: ${{ failure() }}
          uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
          with:
            name: "Failed tests on ${{ matrix.platform}}"
            path: testdata/failed/

# Turned off due to https://github.com/fgrosse/go-coverage-report/issues/5
#        - name: Code coverage report
#          if: ${{ github.event_name == 'pull_request' && matrix.runner == 'ubuntu-latest' && matrix.platform == 'amd64' }}
#          uses: fgrosse/go-coverage-report@8c1d1a09864211d258937b1b1a5b849f7e4f2682 # Consider using a Git revision for maximum security
#          with:
#            coverage-artifact-name: "Tests analytics" # can be omitted if you used this default value
#            coverage-file-name: "coverage.out" # can be omitted if you used this default value

