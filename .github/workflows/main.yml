name: Continuous Integration on main

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  security-events: write
  packages: write
  attestations: write
  id-token: write
  repository-projects: write
  contents: write
  pages: write

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  tag:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      repository-projects: write
      contents: write
    outputs:
      version: ${{ steps.semver.outputs.version }}
      playwright: ${{ steps.playwright.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0

      - name: Playwright version
        id: playwright
        run: |
          export PLAYWRIGHT_GO_VERSION=$(go list -m all | grep github.com/playwright-community/playwright-go | awk '{print $2}')
          echo "playwright_go_version=$PLAYWRIGHT_GO_VERSION" >> "$GITHUB_OUTPUT"
          echo "version="$(go run github.com/playwright-community/playwright-go/cmd/playwright@$PLAYWRIGHT_GO_VERSION --version |cut -d " " -f 2) >> "$GITHUB_OUTPUT"

      - name: Get Next Version
        id: semver
        run: |
          majorminor=$(echo "${{ steps.playwright.outputs.playwright_go_version }}" | cut -d "." -f 1-2)
          patch=$(git tag | grep "$majorminor" | sort -V | tail -n 1 | cut -d "." -f 3)
          if [ -z "$patch" ]; then
            patch=0
          else
            patch=$((patch + 1))
          fi
          echo "Version: $majorminor.$patch"
          echo "version=$majorminor.$patch" >> "$GITHUB_OUTPUT"

      - name: Create tag
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "cedric.bail@pm.me"

      - name: Create tag
        run: |
          git tag -a "${{ steps.semver.outputs.version }}" -m "${{ steps.semver.outputs.version }} release"
          git push origin "${{ steps.semver.outputs.version }}"

  docker:
    permissions:
      packages: write
      attestations: write
      id-token: write
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Log in to the Container registry
        uses: docker/login-action@3d100841f68d4548bf57e52eb27bd33ec5069f55
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        id: push
        with:
          context: "{{defaultContext}}:docker"
          cache-from: |
            type=gha,scope=amd64
            type=gha,scope=arm64
          build-args: PLAYWRIGHT_VERSION=${{ needs.tag.outputs.playwright }}  
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ needs.tag.outputs.version }}
          platforms: linux/arm64,linux/amd64

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-gh-pages:
    concurrency:
      group: 'pages'
      cancel-in-progress: true
    needs: ci
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Upload to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e

      